{"/home/travis/build/npmtest/node-npmtest-mailer/test.js":"/* istanbul instrument in package npmtest_mailer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailer/lib.npmtest_mailer.js":"/* istanbul instrument in package npmtest_mailer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_mailer = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_mailer = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-mailer/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-mailer && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_mailer */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_mailer\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_mailer.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_mailer.rollup.js'] =\n            local.assetsDict['/assets.npmtest_mailer.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_mailer.__dirname + '/lib.npmtest_mailer.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-mailer/node_modules/mailer/lib/node_mailer.js":"/* Copyright (c) 2009-2010 Marak Squires, Elijah Insua, Fedor Indutny - http://github.com/marak/node_mailer\n \nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n \nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n*/\n\nvar SMTPClient = require(\"nodemailer\").SMTPClient;\nvar EmailMessage = require(\"nodemailer\").EmailMessage;\nvar fs = require('fs');\nvar mustache = require('../vendor/mustache');\nvar _templateCache = {};\n\nfunction SMTPClientPool() {\n  this.servers = {};\n}\nSMTPClientPool.prototype.addClient = function(port,host,options) {\n  if(this.servers[host] && this.servers[host][options.user]) return;\n  var hostClients = this.servers[host] || (this.servers[host] = {});\n  var pool = this;\n  var client = hostClients[options.user] = new SMTPClient(host,port,options);\n  client.on(\"close\",function() {\n    if(client == hostClients[options.user]) {\n      //only because this could be crazy long lived and dynamic\n      delete hostClients[options.user];\n      if(Object.keys(hostClients).length == 0) {\n\tdelete pool.servers[host]\n      }\n    }\n  })\n  client.on(\"empty\",function(){\n\tdelete hostClients[options.user];\n\tclient.close();})\n}\nSMTPClientPool.prototype.send = function send(message, callback) {\n  var hostpool = this.servers[message.SERVER.host]\n  if(!hostpool) hostpool = {};\n  var client = hostpool[message.SERVER.user]\n  if(!client) {\n    client = hostpool[message.SERVER.user] = new SMTPClient(message.SERVER.host,message.SERVER.port,message.SERVER);\n    client.on(\"close\",function() {\n      if(client == hostClients[options.user]) {\n          //only because this could be crazy long lived and dynamic\n          delete hostClients[options.user];\n          if(Object.keys(hostClients).length == 0) {\n       delete pool.servers[host]\n          }\n        }\n    })\n    client.on(\"empty\",function(){\n     delete hostClients[options.user];\n     client.close();})\n  }\n  client.sendMail(message,callback);\n  client.on('error', callback);\n}\n\nfunction merge(x,y) {\n  var z = {};\n  for(var k in x) {\n    z[k] = x[k];\n  }\n  for(var k in y) {\n    z[k] = y[k];\n  }\n  return z;\n}\n\nvar pool = new SMTPClientPool();\n\nexports.send = function node_mail(message, callback) {\n  var server = {\n    host: message.host,\n    hostname: message.domain,\n    port: + message.port,\n    use_authentication: message.authentication,\n    ssl: message.ssl,\n    user: message.username && message.username.toString(),\n    pass: message.password && message.password.toString(),\n    debug: message.debug || false\n  };\n  if(message.username || message.password) {\n    pool.addClient(server.port, server.host, server);\n  }\n\n  function dispatchMail(message, server, callback) {\n      var _message = {\n          to: message.to,\n          sender: message.from,\n          subject: message.subject,\n          server: server,\n          debug: message.debug\n      };\n      if(message.html)_message.html = message.html;\n      pool.send(new EmailMessage(merge(message, _message)), callback);\n  }\n\n  // If a template was passed in as part of the message\n  if (message.template) {\n    // If the template path is in the cache\n    if (_templateCache[message.template]) {\n      // If the template is already fully loaded in the cahe\n      if (_templateCache[message.template].loaded) {\n        // Use the cached template and send the email\n        message.html = mustache.to_html(_templateCache[message.template].template, message.data);\n        dispatchMail(message, server, callback);\n      }\n      else {\n        // We've started to load the template, but it's not loaded yet. queue up this message to be sent later\n        _templateCache[message.template].queue.push(message);\n      }\n    }\n    else {\n      // The template path wasn't found in the cache, start to load the template\n      _templateCache[message.template]          = {};\n      _templateCache[message.template].loaded   = false;\n      _templateCache[message.template].template = '';\n      _templateCache[message.template].queue    = [];\n\n      fs.readFile(message.template, function(err, result){\n        if (err) {\n          callback(err);\n          return;\n        }\n\n        _templateCache[message.template].template = result.toString();\n        _templateCache[message.template].loaded   = true;\n\n        // \"Drain\" the queue\n        _templateCache[message.template].queue.push(message);\n        _templateCache[message.template].queue.forEach(function(msg, i){\n          msg.html = mustache.to_html(_templateCache[message.template].template, msg.data);\n          dispatchMail(msg, server, callback);\n        });\n\n        // Clear the queue out\n        _templateCache[message.template].queue = [];\n      });\n    }\n  }\n  else { // No template being used\n    dispatchMail(message, server, callback);\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-mailer/node_modules/mailer/vendor/mustache.js":"/*\n * CommonJS-compatible mustache.js module\n *\n * See http://github.com/janl/mustache.js for more info.\n */\n\n/*\n  mustache.js — Logic-less templates in JavaScript\n\n  See http://mustache.github.com/ for more info.\n*/\n\nvar Mustache = function() {\n  var Renderer = function() {};\n\n  Renderer.prototype = {\n    otag: \"{{\",\n    ctag: \"}}\",\n    pragmas: {},\n    buffer: [],\n    pragmas_implemented: {\n      \"IMPLICIT-ITERATOR\": true\n    },\n    context: {},\n\n    render: function(template, context, partials, in_recursion) {\n      // reset buffer & set context\n      if(!in_recursion) {\n        this.context = context;\n        this.buffer = []; // TODO: make this non-lazy\n      }\n\n      // fail fast\n      if(!this.includes(\"\", template)) {\n        if(in_recursion) {\n          return template;\n        } else {\n          this.send(template);\n          return;\n        }\n      }\n\n      template = this.render_pragmas(template);\n      var html = this.render_section(template, context, partials);\n      if(in_recursion) {\n        return this.render_tags(html, context, partials, in_recursion);\n      }\n\n      this.render_tags(html, context, partials, in_recursion);\n    },\n\n    /*\n      Sends parsed lines\n    */\n    send: function(line) {\n      if(line != \"\") {\n        this.buffer.push(line);\n      }\n    },\n\n    /*\n      Looks for %PRAGMAS\n    */\n    render_pragmas: function(template) {\n      // no pragmas\n      if(!this.includes(\"%\", template)) {\n        return template;\n      }\n\n      var that = this;\n      var regex = new RegExp(this.otag + \"%([\\\\w-]+) ?([\\\\w]+=[\\\\w]+)?\" +\n            this.ctag);\n      return template.replace(regex, function(match, pragma, options) {\n        if(!that.pragmas_implemented[pragma]) {\n          throw({message: \n            \"This implementation of mustache doesn't understand the '\" +\n            pragma + \"' pragma\"});\n        }\n        that.pragmas[pragma] = {};\n        if(options) {\n          var opts = options.split(\"=\");\n          that.pragmas[pragma][opts[0]] = opts[1];\n        }\n        return \"\";\n        // ignore unknown pragmas silently\n      });\n    },\n\n    /*\n      Tries to find a partial in the curent scope and render it\n    */\n    render_partial: function(name, context, partials) {\n      name = this.trim(name);\n      if(!partials || partials[name] === undefined) {\n        throw({message: \"unknown_partial '\" + name + \"'\"});\n      }\n      if(typeof(context[name]) != \"object\") {\n        return this.render(partials[name], context, partials, true);\n      }\n      return this.render(partials[name], context[name], partials, true);\n    },\n\n    /*\n      Renders inverted (^) and normal (#) sections\n    */\n    render_section: function(template, context, partials) {\n      if(!this.includes(\"#\", template) && !this.includes(\"^\", template)) {\n        return template;\n      }\n\n      var that = this;\n      // CSW - Added \"+?\" so it finds the tighest bound, not the widest\n      var regex = new RegExp(this.otag + \"(\\\\^|\\\\#)\\\\s*(.+)\\\\s*\" + this.ctag +\n              \"\\n*([\\\\s\\\\S]+?)\" + this.otag + \"\\\\/\\\\s*\\\\2\\\\s*\" + this.ctag +\n              \"\\\\s*\", \"mg\");\n\n      // for each {{#foo}}{{/foo}} section do...\n      return template.replace(regex, function(match, type, name, content) {\n        var value = that.find(name, context);\n        if(type == \"^\") { // inverted section\n          if(!value || that.is_array(value) && value.length === 0) {\n            // false or empty list, render it\n            return that.render(content, context, partials, true);\n          } else {\n            return \"\";\n          }\n        } else if(type == \"#\") { // normal section\n          if(that.is_array(value)) { // Enumerable, Let's loop!\n            return that.map(value, function(row) {\n              return that.render(content, that.create_context(row),\n                partials, true);\n            }).join(\"\");\n          } else if(that.is_object(value)) { // Object, Use it as subcontext!\n            return that.render(content, that.create_context(value),\n              partials, true);\n          } else if(typeof value === \"function\") {\n            // higher order section\n            return value.call(context, content, function(text) {\n              return that.render(text, context, partials, true);\n            });\n          } else if(value) { // boolean section\n            return that.render(content, context, partials, true);\n          } else {\n            return \"\";\n          }\n        }\n      });\n    },\n\n    /*\n      Replace {{foo}} and friends with values from our view\n    */\n    render_tags: function(template, context, partials, in_recursion) {\n      // tit for tat\n      var that = this;\n\n      var new_regex = function() {\n        return new RegExp(that.otag + \"(=|!|>|\\\\{|%)?([^\\\\/#\\\\^]+?)\\\\1?\" +\n          that.ctag + \"+\", \"g\");\n      };\n\n      var regex = new_regex();\n      var tag_replace_callback = function(match, operator, name) {\n        switch(operator) {\n        case \"!\": // ignore comments\n          return \"\";\n        case \"=\": // set new delimiters, rebuild the replace regexp\n          that.set_delimiters(name);\n          regex = new_regex();\n          return \"\";\n        case \">\": // render partial\n          return that.render_partial(name, context, partials);\n        case \"{\": // the triple mustache is unescaped\n          return that.find(name, context);\n        default: // escape the value\n          return that.escape(that.find(name, context));\n        }\n      };\n      var lines = template.split(\"\\n\");\n      for(var i = 0; i < lines.length; i++) {\n        lines[i] = lines[i].replace(regex, tag_replace_callback, this);\n        if(!in_recursion) {\n          this.send(lines[i]);\n        }\n      }\n\n      if(in_recursion) {\n        return lines.join(\"\\n\");\n      }\n    },\n\n    set_delimiters: function(delimiters) {\n      var dels = delimiters.split(\" \");\n      this.otag = this.escape_regex(dels[0]);\n      this.ctag = this.escape_regex(dels[1]);\n    },\n\n    escape_regex: function(text) {\n      // thank you Simon Willison\n      if(!arguments.callee.sRE) {\n        var specials = [\n          '/', '.', '*', '+', '?', '|',\n          '(', ')', '[', ']', '{', '}', '\\\\'\n        ];\n        arguments.callee.sRE = new RegExp(\n          '(\\\\' + specials.join('|\\\\') + ')', 'g'\n        );\n      }\n      return text.replace(arguments.callee.sRE, '\\\\$1');\n    },\n\n    /*\n      find `name` in current `context`. That is find me a value\n      from the view object\n    */\n    find: function(name, context) {\n      name = this.trim(name);\n\n      // Checks whether a value is thruthy or false or 0\n      function is_kinda_truthy(bool) {\n        return bool === false || bool === 0 || bool;\n      }\n\n      var value;\n      if(is_kinda_truthy(context[name])) {\n        value = context[name];\n      } else if(is_kinda_truthy(this.context[name])) {\n        value = this.context[name];\n      }\n\n      if(typeof value === \"function\") {\n        return value.apply(context);\n      }\n      if(value !== undefined) {\n        return value;\n      }\n      // silently ignore unkown variables\n      return \"\";\n    },\n\n    // Utility methods\n\n    /* includes tag */\n    includes: function(needle, haystack) {\n      return haystack.indexOf(this.otag + needle) != -1;\n    },\n\n    /*\n      Does away with nasty characters\n    */\n    escape: function(s) {\n      s = String(s === null ? \"\" : s);\n      return s.replace(/&(?!\\w+;)|[\"<>\\\\]/g, function(s) {\n        switch(s) {\n        case \"&\": return \"&amp;\";\n        case \"\\\\\": return \"\\\\\\\\\";\n        case '\"': return '\\\"';\n        case \"<\": return \"&lt;\";\n        case \">\": return \"&gt;\";\n        default: return s;\n        }\n      });\n    },\n\n    // by @langalex, support for arrays of strings\n    create_context: function(_context) {\n      if(this.is_object(_context)) {\n        return _context;\n      } else {\n        var iterator = \".\";\n        if(this.pragmas[\"IMPLICIT-ITERATOR\"]) {\n          iterator = this.pragmas[\"IMPLICIT-ITERATOR\"].iterator;\n        }\n        var ctx = {};\n        ctx[iterator] = _context;\n        return ctx;\n      }\n    },\n\n    is_object: function(a) {\n      return a && typeof a == \"object\";\n    },\n\n    is_array: function(a) {\n      return Object.prototype.toString.call(a) === '[object Array]';\n    },\n\n    /*\n      Gets rid of leading and trailing whitespace\n    */\n    trim: function(s) {\n      return s.replace(/^\\s*|\\s*$/g, \"\");\n    },\n\n    /*\n      Why, why, why? Because IE. Cry, cry cry.\n    */\n    map: function(array, fn) {\n      if (typeof array.map == \"function\") {\n        return array.map(fn);\n      } else {\n        var r = [];\n        var l = array.length;\n        for(var i = 0; i < l; i++) {\n          r.push(fn(array[i]));\n        }\n        return r;\n      }\n    }\n  };\n\n  return({\n    name: \"mustache.js\",\n    version: \"0.3.1-dev\",\n\n    /*\n      Turns a template and view into HTML\n    */\n    to_html: function(template, view, partials, send_fun) {\n      var renderer = new Renderer();\n      if(send_fun) {\n        renderer.send = send_fun;\n      }\n      renderer.render(template, view, partials);\n      if(!send_fun) {\n        return renderer.buffer.join(\"\\n\");\n      }\n    }\n  });\n}();\n\nexports.name = Mustache.name;\nexports.version = Mustache.version;\n\nexports.to_html = function() {\n  return Mustache.to_html.apply(this, arguments);\n};\n","/home/travis/build/npmtest/node-npmtest-mailer/node_modules/mailer/demo.js":"var email = require(\"./lib/node_mailer\");\n\nfor(var i = 0; i < 1; i++){\n  email.send({\n    ssl: true,\n    host : \"smtp.gmail.com\",              // smtp server hostname\n    port : 465,                     // smtp server port\n    domain : \"[127.0.0.1]\",            // domain used by client to identify itself to server\n    to : \"bradley.meck@gmail.com\",\n    from : \"bradley.meck@gmail.com\",\n    subject : \"node_mailer test email\",\n    reply_to:\"bradley@bradleymeck.com\",\n    body: \"Hello! This is a test of the node_mailer.\",\n    authentication : \"login\",        // auth login is supported; anything else is no auth\n    username : undefined,            // username\n    password : undefined,            // password\n    debug: true                      // log level per message\n  },\n  function(err, result){\n    if(err){ console.log(err); }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-mailer/node_modules/mailer/demo-template-html.js":"var email = require(\"./lib/node_mailer\");\n\nfor(var i = 0; i < 10; i++){\n\n  email.send({\n    host : \"localhost\",               // smtp server hostname\n    port : \"25\",                     // smtp server port\n    domain : \"localhost\",             // domain used by client to identify itself to server\n    to : \"marak.squires@gmail.com\",\n    from : \"obama@whitehouse.gov\",\n    subject : \"node_mailer test email\",\n    template : \"./templates/sample-html.txt\",   // path to template name\n    data : {\n      \"username\": \"Billy Bob\",\n      \"color\": function(){\n        var arr = [\"purple\", \"red\", \"green\", \"yello\"];\n        return arr[Math.floor(Math.random()*3)];\n      },\n      \"animal\": \"monkey\",\n      \"adverb\": \"quickly\",\n      \"noun\": \"hot lava\"\n    },\n\n    authentication : \"login\",        // auth login is supported; anything else is no auth\n    username : undefined,            // username\n    password : undefined,            // password\n    debug: true                      // log level per message\n  },\n  function(err, result){\n    if(err){ console.log(err); }\n  });\n}\n","/home/travis/build/npmtest/node-npmtest-mailer/node_modules/mailer/demo-template.js":"var email = require(\"./lib/node_mailer\");\n\nfor(var i = 0; i < 10; i++){\n\n  email.send({\n    host : \"localhost\",               // smtp server hostname\n    port : \"25\",                     // smtp server port\n    domain : \"localhost\",             // domain used by client to identify itself to server\n    to : \"marak.squires@gmail.com\",\n    from : \"obama@whitehouse.gov\",\n    subject : \"node_mailer test email\",\n    template : \"./templates/sample.txt\",   // path to template name\n    data : {\n      \"username\": \"Billy Bob\",\n      \"color\": function(){\n        var arr = [\"purple\", \"red\", \"green\", \"yello\"];\n        return arr[Math.floor(Math.random()*3)];\n      },\n      \"animal\": \"monkey\",\n      \"adverb\": \"quickly\",\n      \"noun\": \"hot lava\"\n    },\n\n    authentication : \"login\",        // auth login is supported; anything else is no auth\n    username : undefined,            // username\n    password : undefined,            // password\n    debug: true                      // log level per message\n  },\n  function(err, result){\n    if(err){ console.log(err); }\n  });\n}\n"}